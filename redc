#!/usr/bin/python

import argparse
import logging
import os
import re
import shlex
import socket
import subprocess
import sys
import time
import traceback
import msgpack
import redis
import simplejson

parser = argparse.ArgumentParser()
parser.add_argument("-v", "--verbose", action="store_true")
parser.add_argument("-r", "--redis", default="redis")
parser.add_argument("-c", "--channel", default="rdcontrol")
parser.add_argument("-l", "--log", default="__log__")
parser.add_argument("-A", "--noautoenumerate", action="store_true")
parser.add_argument("-e", "--enumerate", type=int, default=-1)
parser.add_argument("-f", "--foreach", action="store_true")
parser.add_argument("-E", "--enumerator", default="__enumerate__")
parser.add_argument("-R", "--results", default="__results__")
parser.add_argument("-s", "--select", default=None)
parser.add_argument("-T", "--timeout", type=float, default=5.0)
parser.add_argument("--enumeration_time", type=float, default=0.0)
parser.add_argument("-N", "--nwait", type=int, default=-3)
parser.add_argument("-F", "--formatter", default=None)
subparser = parser.add_subparsers(dest="command")
_ = subparser.add_parser("enumerate")
_ = subparser.add_parser("info")
_ = subparser.add_parser("run")
_.add_argument("argv", nargs="+")
_ = subparser.add_parser("start")
_.add_argument("argv", nargs="+")
_ = subparser.add_parser("stop")
_ = subparser.add_parser("upload")
_.add_argument("local")
_.add_argument("remote")
_ = subparser.add_parser("setlist")
_.add_argument("list")
_ = subparser.add_parser("setshards")
_.add_argument("list")
_.add_argument("shards")
_ = subparser.add_parser("waitempty")
_.add_argument("list")
_ = subparser.add_parser("waitcount")
_.add_argument("key")
_.add_argument("count", type=int)
_ = subparser.add_parser("waitlen")
_.add_argument("list")
_.add_argument("count", type=int)
_ = subparser.add_parser("list")
_.add_argument("list", default="outputs", nargs="?")
args = parser.parse_args()

if args.enumeration_time==0:
    args.enumeration_time = args.timeout

formatter = None

def split_sharded_path(path):
    """Split a path containing shard notation into prefix, format, suffix, and number."""
    match = re.search(r"^(.*)@([0-9]+)(.*)", path)
    if not match:
        return path, None
    prefix = match.group(1)
    num = int(match.group(2))
    suffix = match.group(3)
    fmt = "%%0%dd" % len(match.group(2))
    return prefix+fmt+suffix, num

def path_shards(path):
    fmt, n = split_sharded_path(path)
    if n is None:
        yield fmt
    else:
        for i in range(n):
            yield (fmt % i)

def fmt_result(result):
    s = result.get("result")
    if isinstance(s, list):
        s = " ".join([str(x) for x in s])
    s = s.strip()
    return "{}\t{}".format(result.get("__myaddr__"), s)

def print_results(results=None):
    results = results or args.results
    start = time.time()
    while rc.llen(args.results) == 0: 
        if time.time() - start > args.timeout:
            print "(no results in {}s)".format(args.timeout)
            return
        time.sleep(0.01)
    start = time.time()
    if args.nwait < 0:
        nwait = min(abs(args.nwait), int(rc.get(args.enumerator)))
    else:
        nwait = args.nwait
    for i in xrange(nwait):
        result = rc.lpop(args.results)
        if result is None:
            if time.time() - start > args.timeout:
                return
            time.sleep(0.1)
            continue
        print formatter(simplejson.loads(result))
        start = time.time()

def submit(cmd):
    rc.delete(args.results)
    message = simplejson.dumps(cmd, indent=4)
    if args.verbose:
        print message
    rc.publish(args.channel, message)

def auto_enumerate():
    if rc.get(args.enumerator) is not None:
        return
    cmd = dict(command="enumerate",
               results=args.results,
               select="all",
               enumerator=args.enumerator)
    print "auto enumerating for:", args.enumeration_time, "sec"
    submit(cmd)
    time.sleep(args.enumeration_time)
    print "number of workers:", rc.get(args.enumerator)

def cmd_enumerate(cmd):
    rc.delete(args.enumerator)
    submit(cmd)
    print "waiting for:", args.enumeration_time, "sec"
    time.sleep(args.enumeration_time)
    print "number of workers:", rc.get(args.enumerator)

def cmd_info(cmd):
    global formatter
    formatter = globals().get("fmt_"+str(args.formatter)) or fmt_result
    cmd["select"] = args.select or "all"
    submit(cmd)
    print_results()

def cmd_run(cmd):
    global formatter
    formatter = globals().get("fmt_"+str(args.formatter)) or fmt_result
    submit(cmd)
    print_results()

def cmd_start(cmd):
    submit(cmd)
    print_results()

def cmd_stop(cmd):
    submit(cmd)
    print_results()

def cmd_setlist(cmd):
    rc.delete(args.list)
    for line in xreadlines(sys.stdin):
        rc.rpush(args.list, line[:-1])

def cmd_setshards(cmd):
    rc.delete(args.list)
    shards = path_shards(args.shards)
    for shard in shards:
        rc.rpush(args.list, shard)

def cmd_waitempty(cmd):
    while 1:
        n = rc.llen(args.list)
        if n==0: break
        sys.stdout.write("waitempty %6d\r" % n)
        sys.stdout.flush()
        time.sleep(0.5)
    sys.stdout.write("\n")

def cmd_waitcount(cmd):
    while 1:
        n = int(rc.get(args.key))
        if n>=args.count: break
        sys.stdout.write("waitcount %6d\r" % n)
        sys.stdout.flush()
        time.sleep(0.5)
    sys.stdout.write("\n")

def cmd_waitlen(cmd):
    while 1:
        n = rc.llen(args.list)
        sys.stdout.write("waitlen %6d\r" % n)
        sys.stdout.flush()
        if n>=args.count: break
        time.sleep(0.5)
    sys.stdout.write("\n")

def cmd_list(cmd):
    outputs = rc.lrange(args.list, 0, -1)
    for output in outputs:
        print output.strip()

def cmd_upload(cmd):
    if args.local == "-":
        data = sys.stdin.read()
    else:
        with open(args.local, "rb") as stream:
            data = stream.read()
    rc.set("__upload__", data)
    cmd["select"] = args.select or "all"
    cmd["key"] = "__upload__"
    cmd["file"] = args.remote
    cmd["command"] = "put"
    submit(cmd)
    print_results()

if __name__ == "__main__":
    print "connecting to", args.redis
    rc = redis.StrictRedis(args.redis)
    auto_enumerate()
    f = globals().get("cmd_"+args.command)
    if f is None:
        print "{}: unknown command".format(args.command)
        sys.exit(1)
    cmd = dict(command=args.command,
               results=args.results,
               select=args.select or "idle",
               enumerator=args.enumerator)
    if args.foreach:
        cmd["foreach"] = [x.strip() for x in sys.stdin.readlines()]
    elif args.enumerate > 0:
        cmd["enumerate"] = ["__temp__", args.enumerate]
    if "argv" in dir(args):
        cmd["argv"] = args.argv
    formatter = globals().get("fmt_"+str(args.formatter)) or repr
    f(cmd)
